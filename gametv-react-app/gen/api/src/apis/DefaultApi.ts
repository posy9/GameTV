/* tslint:disable */
/* eslint-disable */
/**
 * GameTV service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    Matches,
    MatchesFromJSON,
    MatchesToJSON,
    News,
    NewsFromJSON,
    NewsToJSON,
    Results,
    ResultsFromJSON,
    ResultsToJSON,
    Top,
    TopFromJSON,
    TopToJSON,
} from '../models';

export interface MatchesRequest {
    date?: string;
}

export interface NewsRequest {
    date?: string;
}

export interface ResultsRequest {
    date?: string;
}

export interface TopRequest {
    date?: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Returns information about live results in cybersport
     */
    async matchesRaw(requestParameters: MatchesRequest): Promise<runtime.ApiResponse<Array<Matches>>> {
        const queryParameters: any = {};

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = requestParameters.date;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/matches`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MatchesFromJSON));
    }

    /**
     * Returns information about live results in cybersport
     */
    async matches(requestParameters: MatchesRequest): Promise<Array<Matches>> {
        const response = await this.matchesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns information about latest news in cybersport
     */
    async newsRaw(requestParameters: NewsRequest): Promise<runtime.ApiResponse<Array<News>>> {
        const queryParameters: any = {};

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = requestParameters.date;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/news`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NewsFromJSON));
    }

    /**
     * Returns information about latest news in cybersport
     */
    async news(requestParameters: NewsRequest): Promise<Array<News>> {
        const response = await this.newsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns information about latest results in cybersport
     */
    async resultsRaw(requestParameters: ResultsRequest): Promise<runtime.ApiResponse<Array<Results>>> {
        const queryParameters: any = {};

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = requestParameters.date;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/results`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ResultsFromJSON));
    }

    /**
     * Returns information about latest results in cybersport
     */
    async results(requestParameters: ResultsRequest): Promise<Array<Results>> {
        const response = await this.resultsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns information about top players and teams in cybersport
     */
    async topRaw(requestParameters: TopRequest): Promise<runtime.ApiResponse<Array<Top>>> {
        const queryParameters: any = {};

        if (requestParameters.date !== undefined) {
            queryParameters['date'] = requestParameters.date;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/top`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TopFromJSON));
    }

    /**
     * Returns information about top players and teams in cybersport
     */
    async top(requestParameters: TopRequest): Promise<Array<Top>> {
        const response = await this.topRaw(requestParameters);
        return await response.value();
    }

}
